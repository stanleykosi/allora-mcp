-- Migration: 007_enable_rls_policies
-- Description: Enables Row Level Security (RLS) on all application tables and
-- defines per-user access policies. These policies ensure that each logged-in
-- user can only read and modify the rows that belong to them.
--
-- NOTE: Supabase injects the authenticated user’s UUID into the SQL environment
--       through the `auth.uid()` function. All checks below rely on that value.
--       If you are using an alternative JWT provider (e.g. Clerk) make sure the
--       JWT "sub" claim matches the `users.id` column so that `auth.uid()`
--       returns the correct value.

BEGIN;

------------------------------------------------------------------------
-- Enable / Force RLS on every table
------------------------------------------------------------------------

ALTER TABLE users               ENABLE ROW LEVEL SECURITY;
ALTER TABLE models              ENABLE ROW LEVEL SECURITY;
ALTER TABLE wallets             ENABLE ROW LEVEL SECURITY;
ALTER TABLE performance_metrics ENABLE ROW LEVEL SECURITY;

-- `FORCE` guarantees the policies are applied even for owners / service roles
-- (except superusers). Comment these out if you need owner bypass.
ALTER TABLE users               FORCE ROW LEVEL SECURITY;
ALTER TABLE models              FORCE ROW LEVEL SECURITY;
ALTER TABLE wallets             FORCE ROW LEVEL SECURITY;
ALTER TABLE performance_metrics FORCE ROW LEVEL SECURITY;

------------------------------------------------------------------------
-- users  ────────────────────────────────────────────────────────────────
-- A user can only see / modify their own row.                           
------------------------------------------------------------------------

CREATE POLICY "users_select_self" ON users
    FOR SELECT USING (id = auth.uid()::uuid);

CREATE POLICY "users_update_self" ON users
    FOR UPDATE USING (id = auth.uid()::uuid);

CREATE POLICY "users_insert_self" ON users
    FOR INSERT WITH CHECK (id = auth.uid()::uuid);

------------------------------------------------------------------------
-- models ────────────────────────────────────────────────────────────────
-- The owner (users.id = models.user_id) controls their models.          
------------------------------------------------------------------------

CREATE POLICY "models_select_owner" ON models
    FOR SELECT USING (user_id = auth.uid()::uuid);

CREATE POLICY "models_insert_owner" ON models
    FOR INSERT WITH CHECK (user_id = auth.uid()::uuid);

CREATE POLICY "models_update_owner" ON models
    FOR UPDATE USING (user_id = auth.uid()::uuid);

CREATE POLICY "models_delete_owner" ON models
    FOR DELETE USING (user_id = auth.uid()::uuid);

------------------------------------------------------------------------
-- wallets ───────────────────────────────────────────────────────────────
-- A wallet is considered owned by the user whose model references it.   
------------------------------------------------------------------------

CREATE POLICY "wallets_select_owner" ON wallets
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM models m
            WHERE m.wallet_id = wallets.id AND m.user_id = auth.uid()::uuid
        )
    );

CREATE POLICY "wallets_update_owner" ON wallets
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM models m
            WHERE m.wallet_id = wallets.id AND m.user_id = auth.uid()::uuid
        )
    );

-- (Optional) If you want to allow direct wallet creation / deletion by the
-- application, mirror the INSERT / DELETE policies shown for `models`.

------------------------------------------------------------------------
-- performance_metrics ───────────────────────────────────────────────────
-- A user may only view metrics for their own models.                    
------------------------------------------------------------------------

CREATE POLICY "performance_metrics_select_owner" ON performance_metrics
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM models m
            WHERE m.id = performance_metrics.model_id
              AND m.user_id = auth.uid()::uuid
        )
    );

-- Generally we don’t allow inserts / updates from the client; these rows are
-- generated by the backend service. Add additional policies if needed.

COMMIT;
